#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
};

&lt {
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
};

#define COLEMAK 0
#define NUMBER 1
#define SYMBOL 2
#define UNICODE 3

/ {
    combos {
        compatible = "zmk,combos";

        // Copy/paste combos (bottom row)
        combo_cc {
            timeout-ms = <75>;
            key-positions = <25 26>;  // Z+X
            bindings = <&kp LC(C)>;  // Ctrl+C (copy)
        };

        combo_cv {
            timeout-ms = <75>;
            key-positions = <27 28>;  // C+V
            bindings = <&kp LC(V)>;  // Ctrl+V (paste)
        };

        combo_csc {
            timeout-ms = <75>;
            key-positions = <25 26 27>;  // Z+X+C
            bindings = <&kp LC(LS(C))>;  // Ctrl+Shift+C (copy with formatting)
        };

        combo_csv {
            timeout-ms = <75>;
            key-positions = <26 27 28>;  // X+C+V
            bindings = <&kp LC(LS(V))>;  // Ctrl+Shift+V (paste without formatting)
        };

        // GNOME workspace navigation
        combo_workspace_left {
            timeout-ms = <75>;
            key-positions = <13 14>;  // S+T (home row)
            bindings = <&kp LC(LA(LEFT))>;  // Ctrl+Alt+Left
        };

        combo_workspace_right {
            timeout-ms = <75>;
            key-positions = <19 20>;  // N+E (home row)
            bindings = <&kp LC(LA(RIGHT))>;  // Ctrl+Alt+Right
        };

        // Window tiling
        combo_tile_left {
            timeout-ms = <75>;
            key-positions = <12 13>;  // A+R (left home row)
            bindings = <&kp LS(LG(LEFT))>;  // Super+Shift+Left
        };

        combo_tile_right {
            timeout-ms = <75>;
            key-positions = <20 21>;  // I+O (right home row)
            bindings = <&kp LS(LG(RIGHT))>;  // Super+Shift+Right
        };
    };

    macros {
        // Special currency symbols
        pound: pound {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp A &kp N3 &kp SPACE>;
        };

        euro: euro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U)) &kp N2 &kp N0 &kp A &kp C &kp SPACE>;
        };

        // Czech lowercase vowels
        a_acute: a_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp E &kp N1 &kp SPACE>; };
        e_acute: e_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp E &kp N9 &kp SPACE>; };
        e_caron: e_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N1 &kp B &kp SPACE>; };
        i_acute: i_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp E &kp D &kp SPACE>; };
        o_acute: o_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp F &kp N3 &kp SPACE>; };
        u_acute: u_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp F &kp A &kp SPACE>; };
        u_ring: u_ring { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N6 &kp F &kp SPACE>; };

        // Czech uppercase vowels
        A_acute: A_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp C &kp N0 &kp SPACE>; };
        E_acute: E_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp C &kp N9 &kp SPACE>; };
        E_caron: E_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N1 &kp A &kp SPACE>; };
        I_acute: I_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp C &kp D &kp SPACE>; };
        O_acute: O_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp D &kp N3 &kp SPACE>; };
        U_acute: U_acute { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp D &kp A &kp SPACE>; };
        U_ring: U_ring { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N6 &kp E &kp SPACE>; };

        // Czech lowercase consonants
        c_caron: c_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N0 &kp D &kp SPACE>; };
        d_caron: d_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N0 &kp F &kp SPACE>; };
        n_caron: n_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N4 &kp N8 &kp SPACE>; };
        r_caron: r_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N5 &kp N9 &kp SPACE>; };
        s_caron: s_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N6 &kp N1 &kp SPACE>; };
        t_caron: t_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N6 &kp N5 &kp SPACE>; };
        z_caron: z_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N7 &kp E &kp SPACE>; };

        // Czech uppercase consonants
        C_caron: C_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N0 &kp C &kp SPACE>; };
        D_caron: D_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N0 &kp E &kp SPACE>; };
        N_caron: N_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N4 &kp N7 &kp SPACE>; };
        R_caron: R_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N5 &kp N8 &kp SPACE>; };
        S_caron: S_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N6 &kp N0 &kp SPACE>; };
        T_caron: T_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N6 &kp N4 &kp SPACE>; };
        Z_caron: Z_caron { compatible = "zmk,behavior-macro"; #binding-cells = <0>; bindings = <&kp LC(LS(U)) &kp N1 &kp N7 &kp D &kp SPACE>; };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "COLEMAK";
            bindings = <
&kp GRAVE  &kp Q        &kp W       &kp F       &kp P        &kp G        &kp J        &kp L        &kp U       &kp Y       &kp SEMI     &kp MINUS
&kp LCTRL  &mt LCTRL A  &mt LALT R  &mt LGUI S  &mt LSHFT T  &kp D        &kp H        &mt RSHFT N  &mt RGUI E  &mt LALT I  &mt RCTRL O  &kp SQT
&kp LPAR   &kp Z        &kp X       &kp C       &kp V        &kp B        &kp K        &kp M        &kp COMMA   &kp DOT     &kp FSLH     &kp RPAR
                                    &kp ESC     &lt 1 SPACE  &kp TAB      &kp ENTER    &lt 2 BSPC   &lt 3 DEL
            >;
        };

        number_layer {
            label = "NUMBER";
            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7     &kp N8     &kp N9     &kp N0   &kp BSPC
&caps_word  &kp LCTRL     &kp LALT      &kp LGUI      &kp LSHFT     &none           &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp INS  &kp PRINTSCREEN
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none    &none
                                        &none         &none         &none           &none     &none      &none
            >;
        };

        symbol_layer {
            label = "SYMBOL";
            bindings = <
&kp TAB  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR  &kp BSPC
&kp F11  &kp F1    &kp F2  &kp F3    &kp F4    &kp F5       &kp MINUS  &kp EQUAL  &kp LBRC  &kp RBRC  &kp PIPE  &kp GRAVE
&kp F12  &kp F6    &kp F7  &kp F8    &kp F9    &kp F10      &kp UNDER  &kp PLUS   &kp LBKT  &kp RBKT  &kp BSLH  &kp TILDE
                           &none     &none     &none        &none      &none      &none
            >;
        };

        unicode_layer {
            label = "UNICODE";
            bindings = <
&trans     &trans     &euro      &trans      &trans      &trans         &trans     &pound     &mt u_ring U_ring    &trans     &trans     &trans
&trans     &mt a_acute A_acute    &mt r_caron R_caron    &mt s_caron S_caron    &mt t_caron T_caron    &mt d_caron D_caron       &trans     &mt n_caron N_caron    &mt e_acute E_caron    &mt i_acute I_acute    &mt o_acute O_acute    &trans
&kp LSHFT  &mt z_caron Z_caron    &trans     &mt c_caron C_caron    &trans     &trans         &trans     &trans     &trans               &trans     &trans     &kp RSHFT
                                 &trans     &trans     &trans         &trans     &trans     &trans
            >;
        };
    };
};